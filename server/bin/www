/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('api:server');
var http = require('http');


// hot reload

// var chokidar = require('chokidar')
// var watcher = chokidar.watch('..',
//                              {
//                                ignored: /node_modules/,
//                                persistent: true
//                              })
// watcher.on('ready', function() {
//   console.log("Start watching.")
//   watcher.on('change', function(path, stats) {
//     if (stats) console.log(`File ${path} changed size to ${stats.size}`);
//     if (/[\/\\]api\//.test(path)){
//       console.log(`Clearing module cache from server ${path}`)
//       delete require.cache[path] //
//       require(path)
//     }
//   })
// })


/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3000')
app.set('port', port)


const isProd = process.env.NODE_ENV === 'production'

// if (!isProd) {
//   const webpack = require('webpack')
//   const webpackConfig = require('./webpack.config.js')
//   const compiler = webpack(webpackConfig)
//   app.use(require('webpack-dev-middleware')(compiler, {
//     noInfo: true, publicPath: webpackConfig.output.publicPath
//   }))
//   app.use(require("webpack-hot-middleware")(compiler))
// }


/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
}
